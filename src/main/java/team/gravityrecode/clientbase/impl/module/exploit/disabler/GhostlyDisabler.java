package team.gravityrecode.clientbase.impl.module.exploit.disabler;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import org.apache.commons.lang3.RandomUtils;
import team.gravityrecode.clientbase.Client;
import team.gravityrecode.clientbase.api.eventBus.EventHandler;
import team.gravityrecode.clientbase.api.moduleBase.Module;
import team.gravityrecode.clientbase.api.notifications.Notification;
import team.gravityrecode.clientbase.impl.event.networking.PacketEvent;
import team.gravityrecode.clientbase.impl.event.player.PlayerMotionEvent;
import team.gravityrecode.clientbase.impl.property.mode.Mode;
import team.gravityrecode.clientbase.impl.util.client.TimerUtil;
import team.gravityrecode.clientbase.impl.util.network.PacketUtil;

import java.awt.*;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class GhostlyDisabler extends Mode {
    public GhostlyDisabler(Module owner, String name) {
        super(owner, name);
    }

    private final Queue<Packet<?>> linkedQueue = new LinkedBlockingQueue<>();
    private final TimerUtil timer = new TimerUtil();
    private boolean expectedTeleport, funny;

    @EventHandler
    public void a(PlayerMotionEvent event){
        if (mc.thePlayer == null || !event.isUpdate()) {
            return;
        }
        if (mc.thePlayer.ticksExisted < 3) {
            this.linkedQueue.clear();
            this.timer.reset();
        }
        if (this.timer.hasElapsed(1000L * RandomUtils.nextInt(5, 20))) {
            boolean maxed = this.linkedQueue.size() >= 500;
            if (!maxed && !this.linkedQueue.isEmpty()) {
                Packet<?> packet = this.linkedQueue.poll();
                PacketUtil.sendPacketNoEvent(packet);
            }
            this.timer.reset();
        }
    }

    @EventHandler
    public void b(PacketEvent event){
        if (event.getPacket() instanceof C00PacketKeepAlive) {
            event.cancelEvent();
            this.linkedQueue.add(event.getPacket());
        }

        if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
            C0FPacketConfirmTransaction packet = event.getPacket();
            if (packet.getUid() > 0 && packet.getUid() < 75) {
                return;
            }
            event.cancelEvent();
            this.linkedQueue.add(event.getPacket());
        }

        if (event.getPacket() instanceof S08PacketPlayerPosLook && this.expectedTeleport) {
            this.expectedTeleport = false;
            S08PacketPlayerPosLook packet = event.getPacket();
            if (mc.thePlayer.ticksExisted > 50) {
                event.cancelEvent();
                PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(
                        packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false
                ));
            }
        }

        if (event.getPacket() instanceof C03PacketPlayer && event.getPacketType() == PacketEvent.PacketType.SENDING) {

            C03PacketPlayer packet = event.getPacket();

            if (mc.thePlayer.ticksExisted % 50 == 0) {
                this.expectedTeleport = true;
                if (!funny) {
                    Client.INSTANCE.getNotificationManager().addNotification(new Notification("Disabler!", "Packet sent successfully!", Notification.NotificationType.ALERT,
                            Color.orange.getRGB()));
                    funny = true;
                }

                packet.setOnGround(false);
                packet.setY(10);
            }
        }
    }

    @Override
    public void onEnable() {
        super.onEnable();
        funny = false;
        Client.INSTANCE.getNotificationManager().addNotification(new Notification("Disabler!", "Wait for the packet!", Notification.NotificationType.ALERT,
                Color.orange.getRGB()));
    }
}
