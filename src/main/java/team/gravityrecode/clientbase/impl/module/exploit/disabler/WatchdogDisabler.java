package team.gravityrecode.clientbase.impl.module.exploit.disabler;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S01PacketJoinGame;
import team.gravityrecode.clientbase.api.eventBus.EventHandler;
import team.gravityrecode.clientbase.api.moduleBase.Module;
import team.gravityrecode.clientbase.impl.event.networking.PacketEvent;
import team.gravityrecode.clientbase.impl.event.player.PlayerTeleportEvent;
import team.gravityrecode.clientbase.impl.event.player.TickEvnet;
import team.gravityrecode.clientbase.impl.property.mode.Mode;
import team.gravityrecode.clientbase.impl.util.client.TimerUtil;
import team.gravityrecode.clientbase.impl.util.network.PacketUtil;

import java.util.concurrent.ConcurrentLinkedQueue;

public class WatchdogDisabler extends Mode {
    private final ConcurrentLinkedQueue<Packet<?>> transactions = new ConcurrentLinkedQueue();
    private final TimerUtil timerUtil = new TimerUtil();

    public WatchdogDisabler(Module owner, String name) {
        super(owner, name);
    }

    @Override
    public void onEnable() {
        super.onEnable();
        transactions.clear();
        timerUtil.reset();
    }

    @EventHandler
    public void a(PlayerTeleportEvent event){
        //event.trySafeReject(0, 0);
    }

    @EventHandler
    public void e(PacketEvent event) {
        if(event.getPacket() instanceof S01PacketJoinGame){
            transactions.clear();
            timerUtil.reset();
        }

//        if (event.getPacket() instanceof C00PacketKeepAlive) {
//            if (timerUtil.hasElapsed(220L)) {
//                while (!transactions.isEmpty())
//                    PacketUtil.sendPacketNoEvent(transactions.poll());
//            } else {
//                event.setCancelled(true);
//                transactions.add(event.getPacket());
//            }
//        }
        if(event.getPacket() instanceof C00PacketKeepAlive || event.getPacket() instanceof C0FPacketConfirmTransaction){
            if (timerUtil.hasElapsed(6000L)) {
                while (!transactions.isEmpty())
                    PacketUtil.sendPacketNoEvent(transactions.poll());
            } else {
                event.setCancelled(true);
                transactions.add(event.getPacket());
            }
        }

        if(event.getPacket() instanceof C0BPacketEntityAction){
            C0BPacketEntityAction c0b = event.getPacket();
            if(c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING)
                event.setCancelled(true);
        }
    }
}
